{"version":3,"sources":["Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["Dashboard","props","state","contents","isLoading","errors","sleepCheck","idleCount","runSleep","sleepReady","timedSync","minuteCheck","getLineData","bind","timeSyncData","syncData","syncDataSleep","wakeUp","refreshBrowser","refreshTime","refreshDate","String","Date","getDate","padStart","getMonth","getHours","getMinutes","refreshTl","gsap","timeline","paused","sleepIconTl","this","refreshIcon","document","getElementById","to","rotation","ease","Power4","easeInOut","scale","restart","innerHTML","req1","axios","get","req2","Promise","all","then","spread","resp1","resp2","data","ResponseData","Metros","map","content","direction","JourneyDirection","destination","Destination","arrival","DisplayTime","header","Header","details","Details","setState","catch","setInterval","sleepIval","sleepClock","today","getDay","repeat","repeatDelay","from","opacity","x","y","ttoday","prevState","window","location","reload","clearInterval","warnCheck","filter","className","id","onClick","_","isEmpty","fluid","slice","index","xs","md","lg","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ab74865c.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/alt-text */\nimport React, { Component,} from 'react';\nimport axios from 'axios';\nimport { Grid, Row, Col } from 'react-flexbox-grid';\nimport {gsap, Power4}  from 'gsap';\nimport _ from 'lodash';\nimport './Dashboard.scss';\n\nexport class Dashboard extends Component {\n\n  constructor(props) {\n    super(props);\n    this.timedSync = null;\n    this.minuteCheck = null;\n    this.getLineData = this.getLineData.bind(this);\n    this.timeSyncData = this.timeSyncData.bind(this);\n    this.syncData = this.syncData.bind(this);\n    this.syncDataSleep = this.syncDataSleep.bind(this);\n    this.wakeUp = this.wakeUp.bind(this);\n    this.refreshBrowser = this.refreshBrowser.bind(this);\n    this.refreshTime = this.refreshTime.bind(this);\n    // Code redundancy - need to solve this.\n    this.refreshDate = 'Senast synkad: '+ String(new Date().getDate()).padStart(2, '0') +'/' + String(new Date().getMonth() + 1).padStart(2, '0') + ' kl. ' + new Date().getHours() + ':' + (new Date().getMinutes()<10?'0':'') + new Date().getMinutes();\n    this.refreshTl = gsap.timeline({paused:true});\n    this.sleepIconTl = null;\n  }\n\n  state = {\n    contents: [],\n    isLoading: false,\n    errors: null,\n    sleepCheck: false\n  }\n\n  syncData(){\n    this.refreshIcon = document.getElementById('ttable-refresh');\n    this.refreshTl\n      .to(this.refreshIcon, 1, {rotation:360, ease:Power4.easeInOut })\n      .to(this.refreshIcon, 0.3, {scale:0.8}, \"-=0.70\")\n      .to(this.refreshIcon, 0.2, {scale:1}, \"-=0.3\");\n    this.refreshTl.restart();\n    this.refreshTime();\n    this.getLineData();\n  }\n\n  syncDataSleep(){\n    this.refreshTime();\n    this.getLineData();\n  }\n\n  refreshTime(){\n    var refreshDate = 'Senast synkad: '+ String(new Date().getDate()).padStart(2, '0') +'/' + String(new Date().getMonth() + 1).padStart(2, '0') + ' kl. ' + (new Date().getHours()<10?'0':'') + new Date().getHours() + ':' + (new Date().getMinutes()<10?'0':'') + new Date().getMinutes();\n    document.getElementById('ttable-refresh-info').innerHTML = refreshDate;\n\n    this.idleCount = 0;\n  }\n\n  getLineData(){\n\n    //console.log('fetching from API');\n\n    this.refreshTime();\n\n    let metApi = \"https://api.sl.se/api2/realtimedeparturesV4.json?key=ffbcc90766d24470a6c1bf7226f3bbfd&siteid=9104&timewindow=60&bus=false&tram=false&EnablePrediction=false\";\n    let warnApi = \"https://api.sl.se/api2/deviations.json?key=72fe12ec0cc84395a02e6f8cd199d307&transportMode=metro&siteId=9104\";\n\n    const req1 = axios.get(metApi);\n    const req2 = axios.get(warnApi);\n\n    Promise.all([req1, req2])\n    \n    .then(\n      axios.spread((resp1, resp2) => {\n        //console.log(resp1, resp2);\n        //console.log(resp2.data);\n         return [...resp1.data.ResponseData.Metros, ...resp2.data.ResponseData ].map(\n          content => ({\n            direction: `${content.JourneyDirection}`,\n            destination: `${content.Destination}` ,\n            arrival: `${content.DisplayTime}`,\n            header: `${content.Header}`,\n            details: `${content.Details}`\n          })\n        );\n      })\n    )\n    .then(contents => {\n      this.setState({\n        contents,\n        isLoading: false\n      });\n    })\n    .catch(errors => this.setState({ errors, isLoading: false }));\n  }\n\n  minuteCheck;\n\n  componentDidMount() {\n   this.getLineData();\n   this.minuteCheck = setInterval(this.timeSyncData.bind(this), 60000);\n   this.sleepIval = setInterval(this.sleepClock.bind(this), 60000);\n  }\n\n  idleCount = 0;\n  runSleep = false;\n  sleepReady = false;\n\n  sleepClock(){\n    this.idleCount++;\n\n    const today = new Date();\n\n    // Is it no auto sync-hour? If yes, then be ready to go to bed\n    if(today.getDay() >= 1){\n      if (today.getHours() >= 7 && today.getHours() < 10){\n        this.wakeUp();\n       } else if(today.getHours() >= 10 && today.getHours() < 17){\n        this.sleepReady = true;\n      } else if(today.getHours() >= 17 && today.getHours() < 19){\n        this.wakeUp();\n      }\n      else if (today.getHours() >= 19){\n        this.sleepReady = true;\n      }\n    } else if (today.getDay() === 0) {\n      this.sleepReady = true;\n    }\n\n    // Start the klock, After 30 minutes show sleep-modal with zzz-animation\n    if (this.idleCount === 30 && this.runSleep === false && this.sleepReady ===true){\n      this.setState({sleepCheck: true});\n\n      this.sleepIconTl = gsap.timeline({paused:true,repeat:-1, repeatDelay:1});\n\n      this.sleepIconTl\n      .from('#zzz-1', 0.7, {opacity:0, scale:0.5, x:-10, y:10})\n      .from('#zzz-2', 0.7, {opacity:0, scale:0.5, x:-10, y:10}, \"+=0.2\")\n      .from('#zzz-3', 0.7, {opacity:0, scale:0.5, x:-10, y:10}, \"+=0.2\");\n  \n      this.sleepIconTl.restart();\n\n      this.runSleep = true;\n\n    }\n  }\n\n  timeSyncData(){\n\n    const ttoday = new Date();\n\n    /* So basically: Auto sync from 7:00 AM - 10:00 AM and then again 17:00 PM - 20:00 PN\n    from Monday to Friday and then no auto sync on Weekends. I don't want use up all of my calls. :) */\n\n    if(ttoday.getDay() >= 1){\n      if (ttoday.getHours() >= 7 && ttoday.getHours() < 10){\n        this.getLineData();\n        this.refreshTime();\n      } else if(ttoday.getHours() >= 10 && ttoday.getHours() < 17){\n        // No sync\n      } else if(ttoday.getHours() >= 17 && ttoday.getHours() < 19){\n        this.getLineData();\n        this.refreshTime();\n      } else if (ttoday.getHours() >= 19){\n        // No sync\n      }\n\n    } else if (ttoday.getDay() === 0) {\n      // Weekends \n    }\n\n  }\n\n  wakeUp(){\n    this.setState({sleepCheck: this.prevState})\n    this.syncDataSleep();\n    this.runSleep = false;\n  }\n\n  refreshBrowser(){\n    // I know reload() is deprecated but I am using it now until I come up with a better solution.\n    window.location.reload(false);\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.minuteCheck);\n    clearInterval(this.sleepIval);\n  }\n\n  render() {\n    const { contents, isLoading, sleepCheck} = this.state;\n    \n    // decalre the refreshdate shown in the dashboard every time the app updates\n    const refreshDate = this.refreshDate;\n\n    // declare warning check variable for any ongoing warnings from the API\n    let warnCheck = false;\n    contents.filter(direction => (warnCheck = direction.direction === 'undefined'));\n    \n\n    return(\n        <div className=\"ttable-dashboard-wrapper\">\n        { /* Sleep Modal */\n          sleepCheck ? (\n            <div className=\"ttable-error-modal-wrapper\" id=\"sleep-modal-wrapper\" onClick={this.wakeUp}>\n              <div className=\"ttable-error-modal-box sleep-mode-modal\">\n                <div className=\"ttable-error-inner\">\n                  <div className=\"zzz\" id=\"zzz-3\"></div>\n                  <div className=\"zzz\" id=\"zzz-2\"></div>\n                  <div className=\"zzz\" id=\"zzz-1\"></div>\n                  <div className=\"ttable-error-icon sleep-mode-icon\"></div>\n                  <h2 className=\"ttable-error-heading\">Sovläge</h2>\n                  <p className=\"ttable-error-log\">Tidtabellen har inte uppdaterats på ett tag, peta på skärmen för att uppdatera!</p>\n                </div>\n              </div>\n              <div className=\"ttable-error-black-overlay\"></div>\n            </div>\n          ) : null }\n          { /* Error Modal */\n          _.isEmpty(contents) ? (\n            <div className=\"ttable-error-modal-wrapper\" onClick={this.refreshBrowser}>\n              <div className=\"ttable-error-modal-box\">\n                <div className=\"ttable-error-inner\">\n                  <div className=\"ttable-error-icon\"></div>\n                  <h2 className=\"ttable-error-heading\">Choo-Choo! Något gick fel i hämtningen av data!</h2>\n                  <p className=\"ttable-error-log\">SL API Error</p>\n                </div>\n              </div>\n              <div className=\"ttable-error-black-overlay\"></div>\n            </div>\n          ) : null }\n              <div id=\"ttable-refresh\" className=\"ttable-refresh-icon\" onClick={this.syncData}></div>\n            {!isLoading ? (\n            <Grid className=\"ttable-dashboard-grid\" fluid >\n            {\n            contents.slice(0,2).map(content => {\n              const {destination, arrival, direction, index} = content;\n\n              if (direction > 1)\n              return (\n                    <Row className=\"ttable-dashboard-row ttable-incoming\" key={index}>\n                      <Col className=\"ttable-dashboard-col\" xs={8} md={8} lg={8}>\n                        <div className=\"ttable-destination-icon dest-left\"></div><h3 className=\"ttable-direction\">Tåg mot T-centralen</h3>\n                          <h1 className=\"ttable-destination\" >{destination}</h1>\n                      </Col>\n                      <Col className=\"ttable-dashboard-col ttable-right-info\" xs={4} md={4} lg={4}>\n                        {/*<div id=\"ttable-warn-first\" className=\"ttable-dashboard-no-warn\"> </div>\n                        *warnCheck && \n                        <div id=\"ttable-warn-first\" className=\"ttable-dashboard-warn\"> </div>\n              */}\n                      <h1 className=\"ttable-incoming-time\">{arrival}</h1>\n                      </Col>\n                  </Row>\n                    )\n                  })\n                }\n                            {\n              contents.slice(0,2).map(content => {\n                const {destination, arrival, direction, index} = content;\n\n                if (direction < 2)\n                return (\n                <Row className=\"ttable-dashboard-row ttable-incoming\" key={index}>\n                  <Col className=\"ttable-dashboard-col\" xs={8} md={8} lg={8}>\n                  <h3 className=\"ttable-direction\">Tåg från T-centralen</h3><div className=\"ttable-destination-icon dest-right\"></div>\n                    <h1 className=\"ttable-destination\">{destination}</h1>\n                  </Col>\n                  <Col className=\"ttable-dashboard-col ttable-right-info\" xs={4} md={4} lg={4}>\n                  {/*}\n                    <div id=\"ttable-warn-first\" className=\"ttable-dashboard-no-warn\"> </div>\n                  {warnCheck && \n                    <div id=\"ttable-warn-first\" className=\"ttable-dashboard-warn\"> </div>\n                  */}\n                    <h1 className=\"ttable-incoming-time\">{arrival}</h1>\n                  </Col>\n                </Row>\n                  )\n                })\n              }\n              <Row className=\"ttable-dashboard-row ttable-upcoming\">\n                <Col className=\"ttable-dashboard-col ttable-upcoming-line line-1\" xs={4} md={4} lg={4}>\n                  <div className=\"ttable-dashboard-upcoming-heading-row\">\n                    <div className=\"ttable-destination-icon dest-left\"></div><h4 className=\"ttable-direction\">Tåg mot T-centralen</h4>\n                  </div>\n                  <div className=\"ttable-dashboard-upcoming-body\">\n                  {\n                    contents.map(content => {\n                      const {destination, arrival, direction, index} = content;\n\n                      if (direction > 1)\n                      return (\n                        <div className=\"ttable-dashboard-upcoming-row\" key={index}>\n                          <div className=\"ttable-dashboard-upcoming-col\"> <h2>{destination}</h2></div>\n                          <div className=\"ttable-dashboard-upcoming-col\"><h2>{arrival}</h2></div>\n                        </div>\n                      )\n                    })\n                  }\n                  </div>\n                </Col>\n                <Col className=\"ttable-dashboard-col ttable-upcoming-line line-2\" xs={4} md={4} lg={4}>\n                  <div className=\"ttable-dashboard-upcoming-heading-row\">\n                      <h4 className=\"ttable-direction\">Tåg från T-centralen</h4><div className=\"ttable-destination-icon dest-right\"></div>\n                  </div>\n                  <div className=\"ttable-dashboard-upcoming-body\">\n                  { contents.map(content => {\n                      const {destination, arrival, direction, index} = content;\n                      if (direction < 2)\n                      return (\n                          <div className=\"ttable-dashboard-upcoming-row\" key={index} >\n                            <div className=\"ttable-dashboard-upcoming-col\"> <h2>{destination}</h2></div>\n                            <div className=\"ttable-dashboard-upcoming-col\"><h2>{arrival}</h2></div>\n                          </div>\n                      )\n                    })\n                  }\n                  </div>                 \n                </Col>\n                <Col className=\"ttable-dashboard-col ttable-warnings\" xs md lg>\n                <div className=\"ttable-dashboard-warning-heading-row\">\n                    <h4 className=\"ttable-warning-heading\">Aktuella störningar</h4>\n                </div>\n                <div id=\"ttable-warning-display-wrapper\">\n                <div className=\"ttable-warning-display\" id=\"no-warn\">\n                  <div className=\"ttable-warn-displ-text\">\n                    <p className=\"ttable-warn-displ-h\">Inga störningar just nu.</p>\n                    <p className=\"ttable-warn-displ-sh\">Allt går som på räls...</p>\n                   </div>\n                </div>\n                {warnCheck && \n                <div className=\"ttable-warning-display\" id=\"ongoing-warn\">\n                  <div className=\"ttable-warn-displ-text\">\n                  { contents.slice(-1).map(content => {\n                      const {details,index} = content;\n                      return (\n                    <div className=\"ttable-warn-text-module\" key={index}>\n                      <div className=\"ttable-warn-ongoing-icon\"></div>\n                      <p className=\"ttable-warn-ongoing-text\">{details}</p>\n                    </div>\n                      )\n                    })\n                  }\n                  </div>\n                </div>\n                }\n                </div>\n                <div id=\"ttable-refresh-info\" className=\"ttable-refresh-info\" >{refreshDate}</div>\n                </Col>\n              </Row>\n            </Grid>\n            ) : (\n              <div className=\"ttable-loading-wrapper\"><p className=\"ttable-loading-p\">Hämtar data...</p></div>\n            )}\n        </div>\n    )\n  }\n}\n\nexport default Dashboard;","import Dashboard from './Dashboard.js';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"ttable-app-wrapper\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}